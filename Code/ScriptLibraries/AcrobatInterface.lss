'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library AcrobatInterface
	Created Feb 26, 2014 by Gregory L Washington/AJ/ARMYJAGC
	Description: Comments for Library
%END REM
Option Public
Option Declare


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub xMergePDFs(MyPath As String, MyFiles As String, DestFile As String ) 
Declare 	Public Function doesFileExist(filePath As String) As Boolean
Declare 	Public Function MergePDFs(filePathA As String, filePathB As String, filePathNew As String, bSkipCheck As Boolean) As Integer 

'++LotusScript Development Environment:2:5:(Declarations):0:10

' ADOBE SYSTEMS INCORPORATED
' Copyright (C) 1994-2003 Adobe Systems Incorporated
' All rights reserved.
'
' NOTICE: Adobe permits you to use, modify, and distribute this file
' in accordance with the terms of the Adobe license agreement
' accompanying it. If you have received this file from a source other
' than Adobe, then your use, modification, or distribution of it
' requires the prior written permission of Adobe.
'
' ---------------------------------------------------------------------
'
' iac.bas
'
' - This file contains enumerated data types and constants necessary 
'   for some of the OLE method parameters. It is derived from the C 
'   header file IAC.h

''******************************* AV Things ****************************** ''

'* AV Application Preferences data type *'

Public Const avpPrefsVersion = 0           ' Int32
Public Const avpOpenDialogAtStartup = 1    ' boolean
Public Const avpShowSplashAtStartup = 2    ' boolean
Public Const avpShowToolBar = 3            ' boolean
Public Const avpRememberDialogs = 4        ' boolean
Public Const avpShortMenus = 5             ' boolean
Public Const avpDefaultOverviewType = 6    ' Int32
Public Const avpDefaultZoomScale = 7       ' Fixed
Public Const avpDefaultZoomType = 8        ' Int32
Public Const avpShowLargeImages = 9        ' boolean
Public Const avpGreekText = 10             ' boolean
Public Const avpGreekLevel = 11            ' Int32
Public Const avpSubstituteFontType = 12    ' Int32
Public Const avpDoCalibratedColor = 13     ' boolean
Public Const avpSkipWarnings = 14          ' boolean
Public Const avpPSLevel = 15               ' Int32
Public Const avpShrinkToFit = 16           ' boolean
Public Const avpCaseSensitive = 17         ' boolean
Public Const avpWholeWords = 18            ' boolean
Public Const avpNoteColor = 19             ' PDColorValue
Public Const avpNoteLabel = 20             ' char
Public Const avpMaxThreadZoom = 21         ' Fixed
Public Const avpEnablePageCache = 22       ' boolean
Public Const avpFullScreenColor = 23       ' PDColorValue
Public Const avpUnused1 = 24               ' obsolete
Public Const avpMaxPageCacheZoom = 25      ' Fixed: pages whose zoom > this will not be cached
Public Const avpMinPageCacheTicks = 26     ' Int32: pages which take < this to render will not be cached
Public Const avpMaxPageCacheBytes = 27     ' Int32: overall constraint on storage used by cache
Public Const avpUnused2 = 28               ' obsolete
Public Const avpFullScreenChangeTimeDelay = 29 ' Int32
Public Const avpFullScreenLoop = 30        ' boolean
Public Const avpThumbViewScale = 31        ' Fixed
Public Const avpThumbViewTimeout = 32      ' Int32
Public Const avpDestFitType = 33           ' char
Public Const avpDestZoomInherit = 34       ' boolean
Public Const avpHighlightMode = 35         ' Int32
Public Const avpDefaultSplitterPos = 36    ' Int32
Public Const avpUnused3 = 37               ' obsolete
Public Const avpMaxCosDocCache = 38        ' Int32: max # of bytes of Cos object cache per Cos doc.
Public Const avpPageUnits = 39             ' PageUnits
Public Const avpNoteFontName = 40          ' char*
Public Const avpNoteFontSize = 41          ' Int32
Public Const avpRecentFile1 = 42           ' char *
Public Const avpRecentFile2 = 43           ' char *
Public Const avpRecentFile3 = 44           ' char *
Public Const avpRecentFile4 = 45           ' char *
Public Const avpHighlightColor = 46        ' PDColorValue
Public Const avpFullScreenUseTimer = 47    ' boolean
Public Const avpAntialiasText = 48         ' boolean
Public Const avpAntialiasLevel = 49        ' Int16
Public Const avpPersistentCacheSize = 50   ' Int32
Public Const avpPersistentCacheFolder = 51 ' ASPathName
Public Const avpPageViewLayoutMode = 52    ' PDLayoutMode
Public Const avpSaveAsLinearized = 53      ' boolean
Public Const avpMaxOpenDocuments = 54      ' Int32
Public Const avpTextSelectWordOrder = 55   ' Int32
Public Const avpMarkHiddenPages = 56       ' boolean
Public Const avpFullScreenTransitionType = 57 ' char*
Public Const avpFullScreenClick = 58       ' boolean
Public Const avpFullScreenEscape = 59      ' boolean
Public Const avpFullScreenCursor = 60      ' Int16
Public Const avpOpenInPlace = 61           ' boolean
Public Const avpShowHiddenAnnots = 62      ' boolean
Public Const avpFullScreenUsePageTiming = 63  ' boolean
Public Const avpDownloadEntireFile = 64    ' boolean
Public Const avpEmitHalftones = 65         ' boolean
Public Const avpShowMenuBar = 66            ' /*boolean*/
Public Const avpIgnorePageClip = 67         '/*boolean*/
Public Const avpMinimizeBookmarks = 68    '/* boolean*/
Public Const avpShowAnnotSequence = 69      '/*boolean*/
Public Const avpUseLogicalPageNumbers = 70  '/*boolean*/
Public Const avpASExtensionDigCert = 71     '/*###cannot use via IAC*/
Public Const avpShowLeftToolBar = 72        '/*boolean*/
Public Const avpConfirmOpenFile = 73        '/*boolean*/
Public Const avpNoteLabelEncoding = 74      '/*cannot use via IAC*/
Public Const avpBookmarkShowLocation = 75   '/*boolean*/
Public Const avpUseLocalFonts = 76          '/*boolean*/
Public Const avpCurrCMM = 77                '/*char* */
Public Const avpBrowserIntegration = 78     '/*boolean*/
Public Const avpPrintAnnots = 79            '/*boolean */
Public Const avpSendFarEastFonts = 80       '/*boolean */
Public Const avpSuppressCSA = 81            '/*boolean */


'* AVZoomType -- Variable zoom "verbs", corresponding to View menu items *'

Public Const AVZoomNoVary = 0             ' no variable zoom - use this for XYZ zoom
Public Const AVZoomFitPage = 1            ' fit page to window
Public Const AVZoomFitWidth = 2           ' fit page width to window
Public Const AVZoomFitHeight = 3          ' fit page height to window
Public Const AVZoomFitVisibleWidth = 4    ' fit visible width to window
Public Const AVZoomPreferred = 5             '/* use page's preferred zoom */


Public Const AV_EXTERNAL_VIEW = 1     ' Open the document with tool bar visible
Public Const AV_DOC_VIEW = 2          ' Draw the page pane and scrollbars
Public Const AV_PAGE_VIEW = 4         ' Draw only the page pane


'********************************* PD Things ***********************************'

'* PDPageMode -- Variable for how the file opens - bookmarks, thumbnails, full screen, none *'

Public Const PDDontCare = 0
Public Const PDUseNone = 1
Public Const PDUseThumbs = 2
Public Const PDUseBookmarks = 3
Public Const PDFullScreen = 4


'* PDLayoutMode -- Variable for how the file is opened - single page, one column, two column *'

Public Const PDLayoutDontCare = 0
Public Const PDLayoutSinglePage = 1
Public Const PDLayoutOneColumn = 2
Public Const PDLayoutTwoColumnLeft = 3
Public Const PDLayoutTwoColumnRight = 4


'* PDDocFlags -- used for Getting or Setting the flags of a PD doc *'

Public Const PDDocNeedsSave = &H1           '/* document has been modified and needs saving (get/set) */
Public Const PDDocRequiresFullSave = &H2    '/* document cannot be saved incrementally; must
                                            ' be written with PDSaveFull. (get/set)
                                            ' */
Public Const PDDocIsModified = &H4          '/* document has been modified internally, such as
                                            'opening/closing bookmarks and annotations, but
                                            'not in such a way as to warrant saving.
                                            '(get only)
                                            '*/
Public Const PDDocDeleteOnClose = &H8       '/* document is based on a temporary file which must
                                            'be deleted when the document is closed or saved.
                                            '(get/set)
                                            '*/
Public Const PDDocWasRepaired = &H10        '/* document was repaired when opened (get only) */
Public Const PDDocNewMajorVersion = &H20    '/* document major version newer than current (get only) */
Public Const PDDocNewMinorVersion = &H40    '/* document minor version newer than current (get only) */
Public Const PDDocOldVersion = &H80         '/* document version older than current (get only) */
Public Const PDDocSuppressErrors = &H100    '/* don't display errors (get/set) */
Public Const PDDocIsEmbedded = &H200        '/* document is embedded in a compound doc (OLE, OpenDoc) */
Public Const PDDocIsLinearized = &H400      '/* document is linearized (get only) */
Public Const PDDocIsOptimized = &H800       '/* document is optimized */


'* PDInsertFlags -- used for inserting pages *'

Public Const PDInsertBookmarks = &H1       '' insert bookmarks as well as pages
Public Const PDInsertAll = &H1000          '' insert all Catalog and Info dict values as well as pages
Public Const PDInsertThreads = &H2       '/* insert articles as well */

'* Page specification defines -- use where a page number or range or count is required *'
Public Const PDBeforeFirstPage = -1 '
Public Const PDLastPage = -2      '
Public Const PDAllPages = -3 '
Public Const PDOddPagesOnly = -4 '
Public Const PDEvenPagesOnly = -5 '

'* PDSaveFlags -- used for PD-level Save
'* All undefined flags should be set to zero.
'* If either PDSaveCollectGarbage or PDSaveCopy are used, PDSaveFull must be used.


Public Const PDSaveIncremental = &H0   ' write changes only
Public Const PDSaveFull = &H1          ' write entire file
Public Const PDSaveCopy = &H2          ' write copy w'o affecting current state
Public Const PDSaveLinearized = &H4    ' writes the file linearized for
                                        ' page-served remote (net) access.
Public Const PDSaveBinaryOK = &H10       ' /* OK to store binary in file */
Public Const PDSaveCollectGarbage = &H20  ' perform garbage collection on unreferenced objects ''


'* Enum for routines that set/get the value of a page's Rotate key. *'

Public Const pdRotate0 = 0
Public Const pdRotate90 = 90
Public Const pdRotate180 = 180
Public Const pdRotate270 = 270


'Lotus Domino API Declares
Declare Function NEMEnableWaitCursor Lib "nnotesws.dll" () As Long
Declare Function NEMDisableWaitCursor Lib "nnotesws.dll" () As Long 




'++LotusScript Development Environment:2:2:xMergePDFs:1:8
Sub xMergePDFs(MyPath As String, MyFiles As String, DestFile As String ) 
     ' ZVI:2013-08-27 http://www.vbaexpress.com/forum/showthread.php?47310-Need-code-to-merge-PDF-files-in-a-folder-using-adobe-acrobat-X
     ' Reference required: VBE - Tools - References - Acrobat
  '%REM  
    Dim a As Variant
    dim i As Long
    dim n As Long
    dim ni As Long
    dim p As String 
    Dim AcroApp As Variant 
    Dim PartDocs As Variant
    
    
    
    
    Set AcroApp = CreateObject("Acrobat.AcroApp")
    
 	Set PartDocs= CreateObject("Acrobat.CAcroPDDoc") 
     
	If Right(MyPath, 1) = "\" Then 
	p = MyPath 
	Else 
	p = MyPath & "\" 
	End If
	
	a = Split(MyFiles, ",") 
	ReDim PartDocs(0 To UBound(a)) 
	
	On Error GoTo exit_ 
    If Len(Dir(p & DestFile)) Then Kill p & DestFile 
    For i = 0 To UBound(a) 
         ' Check PDF file presence
        If Dir(p & Trim(a(i))) = "" Then 
      '''     MsgBox "File not found" & vbLf & p & a(i), vbExclamation, "Canceled" 
            Exit For 
        End If 
         ' Open PDF document
        Set PartDocs(i) = CreateObject("AcroExch.PDDoc") 
        PartDocs(i).Open p & Trim(a(i)) 
        If i Then 
             ' Merge PDF to PartDocs(0) document
            ni = PartDocs(i).GetNumPages() 
            If Not PartDocs(0).InsertPages(n - 1, PartDocs(i), 0, ni, True) Then 
         '''      MsgBox "Cannot insert pages of" & vbLf & p & a(i), vbExclamation, "Canceled" 
            End If 
             ' Calc the number of pages in the merged document
            n = n + ni 
             ' Release the memory
            PartDocs(i).Close 
            Set PartDocs(i) = Nothing 
        Else 
             ' Calc the number of pages in PartDocs(0) document
            n = PartDocs(0).GetNumPages() 
        End If 
    Next 
     
    If i > UBound(a) Then 
         ' Save the merged document to DestFile
        If Not PartDocs(0).Save(PDSaveFull, p & DestFile) Then 
          ''' MsgBox "Cannot save the resulting document" & vbLf & p & DestFile, vbExclamation, "Canceled" 
        End If 
    End If 
     
exit_: 
     
     ' Inform about error/success
    If Err Then 
 ''''      MsgBox Err.Description, vbCritical, "Error #" & Err.Number 
    ElseIf i > UBound(a) Then 
  ''''     MsgBox "The resulting file is created:" & vbLf & p & DestFile, vbInformation, "Done" 
    End If 
     
     ' Release the memory
    If Not PartDocs(0) Is Nothing Then PartDocs(0).Close 
    Set PartDocs(0) = Nothing 
     
     ' Quit Acrobat application
    AcroApp.Exit 
    Set AcroApp = Nothing 
   '%END REM 
End Sub 

'++LotusScript Development Environment:2:1:doesFileExist:5:8
%REM
	Function doesFileExist
	Description: Comments for Function
	%END REM
	Public Function doesFileExist(filePath As String) As Boolean
		If Dir$(filePath,0) <> "" Then
 			doesFileExist = True
		Else
			 doesFileExist = False
		End If		
	End Function

'++LotusScript Development Environment:2:1:MergePDFs:2:8
	
	Public Function MergePDFs(filePathA As String, filePathB As String, filePathNew As String, bSkipCheck As Boolean) As Integer 
		' ZVI:2013-08-27 http://www.vbaexpress.com/forum/showthread.php?47310-Need-code-to-merge-PDF-files-in-a-folder-using-adobe-acrobat-X
		' Reference required: VBE - Tools - References - Acrobat
		On Error GoTo PROCESS_ERROR
		
		Dim AcroApp As Variant 'New Acrobat.AcroApp
		Dim PDDoc List As Variant
		Dim numOfPages List As Long

		Call NEMEnableWaitCursor		
		If filePathNew = "" Then filePathNew = filePathB
		Set AcroApp  = CreateObject("AcroExch.App")				
		MergePDFs = 0
		
		If bSkipcheck Or (doesFileExist(filePathA) And doesFileExist(filePathB)) Then
			Set PDDoc("A") = CreateObject("AcroExch.PDDoc")
			Set PDDoc("B") = CreateObject("AcroExch.PDDoc")
			PDDoc("A").Open(filePathA)
			PDDoc("B").Open(filePathB)		
			numOfPages("A") = PDDoc("A").GetNumPages()
			numOfPages("B") = PDDoc("B").GetNumPages()
			Print "Appending " + CStr(numOfPages("A")) + " pages to "  + filePathB			
			Call PDDoc("B").InsertPages(numOfPages("B") - 1, PDDoc("A"), 0, numOfPages("A"), True)
			If PDDoc("B").Save(PDSaveFull, filePathNew)= -1 Then MergePDFs = -1		
			Print "PDF Saved: New page total is " + CStr(numOfPages("A") + numOfPages("B")) + " pages"
		End If  
		
	CLEAN_EXIT: 
		Call NEMDisableWaitCursor
		Call AcroApp.CloseAllDocs()
		Call AcroApp.Exit() 
		Set PDDoc("A") = Nothing
		Set PDDoc("B") = Nothing
		Set AcroApp = Nothing 
		Exit Function
		
	PROCESS_ERROR :
		Print "lsAcrobatAPI.MergePDFs() - ERROR: " + CStr(Err) + " " + Error$
		MergePDFs = Err 
		Resume CLEAN_EXIT
	
End Function 