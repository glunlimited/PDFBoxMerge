<?xml version='1.0' encoding='utf-8'?>
<scriptlibrary name='ClassesPDFBox' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.0' replicaid='85257CB50072A923' hide='v3 v4strict'
 designerversion='8.5.3'>
<noteinfo noteid='20e' unid='70C83D6ECD841B4785257CAF00662BD7' sequence='5'>
<created><datetime dst='true'>20140403T143558,95-04</datetime></created>
<modified><datetime dst='true'>20140411T134541,17-04</datetime></modified>
<revised><datetime dst='true'>20140411T134541,16-04</datetime></revised>
<lastaccessed><datetime dst='true'>20140411T134541,17-04</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20140409T165224,79-04</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name><name>CN=Admin Glunlimited/O=Development</name></updatedby><code
 event='library'><javaproject class='JavaAgent.class' codepath='c:\Program Files (x86)\IBM\Lotus\Notes\Data'><java
 name='Untitled.java'>public class Untitled { 
}</java><java name='mil/army/us/pdfbox/pdmodel/graphics/xobject/PDCcitt.java'>/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package mil.army.us.pdfbox.pdmodel.graphics.xobject;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;

import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pdfbox.cos.COSArray;
import org.apache.pdfbox.cos.COSBase;
import org.apache.pdfbox.cos.COSDictionary;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.io.RandomAccess;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.common.PDStream;
import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;
import org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;

/**
 * An image class for CCITT Fax.
 *
 * @author &lt;a href="ben@benlitchfield.com"&gt;Ben Litchfield&lt;/a&gt;
 * @author paul king
 * @version $Revision: 1.6 $
 */
public class PDCcitt extends PDXObjectImage
{

	/**
	 * Log instance.
	 */
	private static final Log log = LogFactory.getLog(PDCcitt.class);

	private static final List FAX_FILTERS = new ArrayList();

	static
	{
		FAX_FILTERS.add( COSName.CCITTFAX_DECODE.getName() );
		FAX_FILTERS.add( COSName.CCITTFAX_DECODE_ABBREVIATION.getName() );
	}

	/**
	 * Standard constructor.
	 *
	 * @param ccitt The PDStream that already contains all ccitt information.
	 */
	public PDCcitt(PDStream ccitt)
	{
		super(ccitt, "tiff");

	}

	/**
	 * Construct from a tiff file.
	 *
	 * @param doc The document to create the image as part of.
	 * @param raf The random access TIFF file which contains a suitable CCITT compressed image
	 * @throws IOException If there is an error reading the tiff data.
	 */

	public PDCcitt( PDDocument doc, RandomAccess raf ) throws IOException
	{
		super( new PDStream(doc),"tiff");
		// super( new PDStream( doc, null, true ), "tiff" );

		COSDictionary decodeParms = new COSDictionary();

		COSDictionary dic = getCOSStream();

		extractFromTiff(raf, getCOSStream().createFilteredStream(),decodeParms);

		dic.setItem( COSName.FILTER, COSName.CCITTFAX_DECODE);
		dic.setItem( COSName.SUBTYPE, COSName.IMAGE);
		dic.setItem( COSName.TYPE, COSName.getPDFName( "XObject" ) );
		dic.setItem( "DecodeParms", decodeParms);

		setBitsPerComponent( 1 );
		setColorSpace( new PDDeviceGray() );
		setWidth( decodeParms.getInt("Columns") );
		setHeight( decodeParms.getInt("Rows") );

	}

	/**
	 * Returns an image of the CCITT Fax, or null if TIFFs are not supported. (Requires additional JAI Image filters )
	 *
	 * {@inheritDoc}
	 */
	public BufferedImage getRGBImage() throws IOException
	{
		BufferedImage retval = null;

		InputStream tiff = new TiffWrapper(
				getPDStream().getPartiallyFilteredStream( FAX_FILTERS ),
				getCOSStream());
		try 
		{
			retval = ImageIO.read(tiff);
		}
		catch (Exception e)
		{
			log.error(e, e);
		} 
		finally 
		{
			if (tiff != null)
			{
				tiff.close();
			}
		}
		return retval;
	}

	/**
	 * This writes a tiff to out.
	 *
	 * {@inheritDoc}
	 */
	public void write2OutputStream(OutputStream out) throws IOException
	{
		InputStream data = new TiffWrapper(getPDStream().getPartiallyFilteredStream( FAX_FILTERS ),getCOSStream());
		byte[] buf = new byte[1024];
		int amountRead = -1;
		while( (amountRead = data.read( buf )) != -1 )
		{
			out.write( buf, 0, amountRead );
		}
	}

	/**
	 * Extract the ccitt stream from the tiff file.
	 *
	 * @param raf  - TIFF File
	 * @param os   - Stream to write raw ccitt data two
	 * @param parms - COSDictionary which the encoding parameters are added to
	 * @throws IOException If there is an error reading/writing to/from the stream
	 */
	private void extractFromTiff(RandomAccess raf, OutputStream os, COSDictionary parms) throws IOException
	{
		try
		{

			// First check the basic tiff header
			raf.seek(0);
			char endianess = (char) raf.read();
			if ((char) raf.read() != endianess)
			{
				throw new IOException("Not a valid tiff file");
			}
			//ensure that endianess is either M or I
			if (endianess != 'M' &amp;&amp; endianess != 'I')
			{
				throw new IOException("Not a valid tiff file");
			}
			int magicNumber = readshort(endianess, raf);
			if( magicNumber != 42)
			{
				throw new  IOException("Not a valid tiff file");
			}

			// Relocate to the first set of tags
			raf.seek(readlong(endianess, raf));

			int numtags = readshort(endianess, raf);

			//    The number 50 is somewhat arbitary, it just stops us load up junk from somewhere and tramping on
			if (numtags &gt; 50)
			{
				throw new IOException("Not a valid tiff file");
			}

			// Loop through the tags, some will convert to items in the parms dictionary
			// Other point us to where to find the data stream
			// The only parm which might change as a result of other options is K, so
			// We'll deal with that as a special;

			int k=-1000; // Default Non CCITT compression
			int dataoffset=0;
			int datalength=0;

			for (int i=0; i &lt; numtags; i++)
			{
				int tag = readshort(endianess, raf);
				int type = readshort(endianess, raf);
				int count = readlong(endianess, raf);
				int val = readlong(endianess, raf); // See note

				// Note, we treated that value as a long. The value always occupies 4 bytes
				// But it might only use the first byte or two. Depending on endianess we might need to correct
				// Note we ignore all other types, they are of little interest for PDFs/CCITT Fax
				if (endianess == 'M')
				{
					switch (type)
					{
					case 1:
					{
						val = val &gt;&gt; 24;
						break; // byte value
					}
					case 3:
					{
						val = val &gt;&gt; 16;
						break; // short value
					}
					case 4:
					{
						break; // long value
					}
					default:
					{
						//do nothing
					}
					}
				}
				switch (tag)
				{
				case 256:
				{
					parms.setInt("Columns",val);
					break;
				}
				case 257:
				{
					parms.setInt("Rows",val);
					break;
				}
				case 259:
				{
					if (val == 4)
					{
						k=-1;
					}
					if (val == 3)
					{
						k=0;
					}
					break;  // T6/T4 Compression
				}
				case 262:
				{
					if (val == 1)
					{
						parms.setBoolean("BlackIs1", true);
					}
					break;
				}
				case 273:
				{
					if (count == 1)
					{
						dataoffset=val;
					}
					break;
				}
				case 279:
				{
					if (count == 1)
					{
						datalength=val;
					}
					break;
				}
				case 292:
				{
					if (val == 1)
					{
						k=50;  // T4 2D - arbitary K value
					}
					break;
				}
				case 324:
				{
					if (count == 1)
					{
						dataoffset=val;
					}
					break;
				}
				case 325:
				{
					if (count == 1)
					{
						datalength=val;
					}
					break;
				}
				default:
				{
					//do nothing
				}
				}
			}

			if (k == -1000)
			{
				throw new IOException("First image in tiff is not CCITT T4 or T6 compressed");
			}
			if (dataoffset == 0)
			{
				throw new IOException("First image in tiff is not a single tile/strip");
			}

			parms.setInt("K",k);

			raf.seek(dataoffset);

			byte[] buf = new byte[8192];
			int amountRead = -1;
			while( (amountRead = raf.read( buf,0, Math.min(8192,datalength) )) &gt; 0 )
			{
				datalength -= amountRead;
				os.write( buf, 0, amountRead );
			}

		}
		finally
		{
			os.close();
		}
	}

	private int readshort(char endianess, RandomAccess raf) throws IOException
	{
		if (endianess == 'I')
		{
			return raf.read() | (raf.read() &lt;&lt; 8);
		}
		return (raf.read() &lt;&lt; 8) | raf.read();
	}

	private int readlong(char endianess, RandomAccess raf) throws IOException
	{
		if (endianess == 'I')
		{
			return raf.read() | (raf.read() &lt;&lt; 8) | (raf.read() &lt;&lt; 16) | (raf.read() &lt;&lt; 24);
		}
		return (raf.read() &lt;&lt; 24) | (raf.read() &lt;&lt; 16) | (raf.read() &lt;&lt; 8) | raf.read();
	}


	/**
	 * Extends InputStream to wrap the data from the CCITT Fax with a suitable TIFF Header.
	 * For details see www.tiff.org, which contains useful information including pointers to the
	 * TIFF 6.0 Specification
	 *
	 */
	private class TiffWrapper extends InputStream
	{

		private int currentOffset;     // When reading, where in the tiffheader are we.
		private byte[] tiffheader;      // Byte array to store tiff header data
		private InputStream datastream; // Original InputStream

		private TiffWrapper(InputStream rawstream, COSDictionary options)
		{
			buildHeader(options);
			currentOffset=0;
			datastream = rawstream;
		}

		// Implement basic methods from InputStream
		/**
		 * {@inheritDoc}
		 */
		public boolean markSupported()
		{
			return false;
		}
		/**
		 * {@inheritDoc}
		 */
		public void reset() throws IOException
		{
			throw new IOException("reset not supported");
		}

		/**
		 * For simple read, take a byte from the tiffheader array or pass through.
		 *
		 * {@inheritDoc}
		 */
		public int read() throws IOException
		{
			if (currentOffset &lt; tiffheader.length)
			{
				return tiffheader[currentOffset++];
			}
			return datastream.read();
		}

		/**
		 * For read methods only return as many bytes as we have left in the header
		 * if we've exhausted the header, pass through to the InputStream of the raw CCITT data.
		 *
		 * {@inheritDoc}
		 */
		public int read(byte[] data) throws IOException
		{
			if (currentOffset &lt; tiffheader.length)
			{
				int length = java.lang.Math.min(tiffheader.length - currentOffset, data.length);
				if (length &gt; 0)
				{
					System.arraycopy(tiffheader, currentOffset, data, 0, length);
				}
				currentOffset += length;
				return length;
			}
			else
			{
				return datastream.read(data);
			}
		}

		/**
		 * For read methods only return as many bytes as we have left in the header
		 * if we've exhausted the header, pass through to the InputStream of the raw CCITT data.
		 *
		 *  {@inheritDoc}
		 */
		public int read(byte[] data, int off, int len) throws IOException
		{
			if (currentOffset &lt; tiffheader.length)
			{
				int length = java.lang.Math.min(tiffheader.length - currentOffset, len);
				if (length &gt; 0)
				{
					System.arraycopy(tiffheader, currentOffset, data, off, length);
				}
				currentOffset += length;
				return length;
			}
			else
			{
				return datastream.read(data,off,len);
			}
		}

		/**
		 * When skipping if any header data not yet read, only allow to skip what we've in the buffer
		 * Otherwise just pass through.
		 *
		 * {@inheritDoc}
		 */
		public long skip(long n) throws IOException
		{
			if (currentOffset &lt; tiffheader.length)
			{
				long length = Math.min(tiffheader.length - currentOffset, n);
				currentOffset += length;
				return length;
			}
			else
			{
				return datastream.skip(n);
			}
		}

		// Static data for the beginning of the TIFF header
		private final byte[] basicHeader = {
				'I','I',42,0,8,0,0,0,       // File introducer and pointer to first IFD
				0,0};                       // Number of tags start with two


		private int additionalOffset;      // Offset in header to additional data

		// Builds up the tiffheader based on the options passed through.
		private void buildHeader(COSDictionary options)
		{

			final int numOfTags = 10; // The maximum tags we'll fill
			final int maxAdditionalData = 24; // The maximum amount of additional data
			// outside the IFDs. (bytes)

			// The length of the header will be the length of the basic header (10)
			// plus 12 bytes for each IFD, 4 bytes as a pointer to the next IFD (will be 0)
			// plus the length of the additional data

			tiffheader = new byte[10 + (12 * numOfTags ) + 4 + maxAdditionalData];
			java.util.Arrays.fill(tiffheader,(byte)0);
			System.arraycopy(basicHeader,0,tiffheader,0,basicHeader.length);

			// Additional data outside the IFD starts after the IFD's and pointer to the next IFD (0)
			additionalOffset = 10 + (12 * numOfTags ) + 4;

			// Now work out the variable values from TIFF defaults,
			// PDF Defaults and the Dictionary for this XObject
			short cols = 1728;
			short rows = 0;
			short blackis1 = 0;
			short comptype = 3; // T4 compression
			long t4options = 0; // Will set if 1d or 2d T4

			COSBase dicOrArrayParms = options.getDictionaryObject("DecodeParms");
			COSDictionary decodeParms = null;
			if( dicOrArrayParms instanceof COSDictionary )
			{
				decodeParms = (COSDictionary)dicOrArrayParms;
			}
			else
			{
				COSArray parmsArray = (COSArray)dicOrArrayParms;
				if( parmsArray.size() == 1 )
				{
					decodeParms = (COSDictionary)parmsArray.getObject( 0 );
				}
				else
				{
					//else find the first dictionary with Row/Column info and use that.
					for( int i=0; i&lt;parmsArray.size() &amp;&amp; decodeParms == null; i++ )
					{
						COSDictionary dic = (COSDictionary)parmsArray.getObject( i );
						if (dic != null &amp;&amp; 
								( dic.getDictionaryObject( "Columns" ) != null ||
										dic.getDictionaryObject( "Rows" ) != null))
						{
							decodeParms = dic;
						}
					}
				}
			}

			if (decodeParms != null)
			{
				cols = (short) decodeParms.getInt("Columns", cols);
				rows = (short) decodeParms.getInt("Rows", rows);
				if (decodeParms.getBoolean("BlackIs1", false))
				{
					blackis1 = 1;
				}
				int k = decodeParms.getInt("K");  // Mandatory parm
				if (k &lt; 0)
				{
					//T6
					comptype = 4;
				}
				if (k &gt; 0)
				{
					//T4 2D
					comptype = 3;
					t4options = 1;
				}
				// else k = 0, leave as default T4 1D compression
			}

			// If we couldn't get the number of rows, use the main item from XObject
			if (rows == 0)
			{
				rows = (short) options.getInt("Height", rows);
			}

			// Now put the tags into the tiffheader
			// These musn't exceed the maximum set above, and by TIFF spec should be sorted into
			// Numeric sequence.

			addTag(256, cols); // Columns
			addTag(257, rows); // Rows
			addTag(259, comptype);    // T6
			addTag(262, blackis1); // Photometric Interpretation
			addTag(273, tiffheader.length); // Offset to start of image data - updated below
			addTag(279, options.getInt("Length")); // Length of image data
			addTag(282, 300, 1); // X Resolution 300 (default unit Inches) This is arbitary
			addTag(283, 300, 1); // Y Resolution 300 (default unit Inches) This is arbitary
			if (comptype == 3)
			{
				addTag(292, t4options);
			}
			addTag(305, "PDFBOX"); // Software generating image
		}

		/* Tiff types 1 = byte, 2=ascii, 3=short, 4=ulong 5=rational */

		private void addTag(int tag,long value)
		{
			// Adds a tag of type 4 (ulong)
			int count = ++tiffheader[8];
			int offset = (count-1)*12 + 10;
			tiffheader[offset]=(byte)(tag &amp; 0xff);
			tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+2]=4;  // Type Long
			tiffheader[offset+4]=1;  // One Value
			tiffheader[offset+8]=(byte)(value &amp; 0xff);
			tiffheader[offset+9]=(byte)((value&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+10]=(byte)((value&gt;&gt;16) &amp; 0xff);
			tiffheader[offset+11]=(byte)((value&gt;&gt;24) &amp; 0xff);
		}

		private void addTag(int tag, short value)
		{
			// Adds a tag of type 3 (short)
			int count = ++tiffheader[8];
			int offset = (count-1)*12 + 10;
			tiffheader[offset]=(byte)(tag &amp; 0xff);
			tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+2]=3;  // Type Short
			tiffheader[offset+4]=1;  // One Value
			tiffheader[offset+8]=(byte)(value &amp; 0xff);
			tiffheader[offset+9]=(byte)((value&gt;&gt;8) &amp; 0xff);
		}

		private void addTag(int tag, String value)
		{
			// Adds a tag of type 2 (ascii)
			int count = ++tiffheader[8];
			int offset = (count-1)*12 + 10;
			tiffheader[offset]=(byte)(tag &amp; 0xff);
			tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+2]=2;  // Type Ascii
			tiffheader[offset+4]=1;  // One Value
			tiffheader[offset+8]=(byte)(additionalOffset &amp; 0xff);
			tiffheader[offset+9]=(byte)((additionalOffset&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+10]=(byte)((additionalOffset&gt;&gt;16) &amp; 0xff);
			tiffheader[offset+11]=(byte)((additionalOffset&gt;&gt;24) &amp; 0xff);
			System.arraycopy(value.getBytes(), 0, tiffheader, additionalOffset, value.length());
			additionalOffset += value.length() + 1;
		}

		private void addTag(int tag, long numerator, long denominator)
		{
			// Adds a tag of type 5 (rational)
			int count = ++tiffheader[8];
			int offset = (count-1)*12 + 10;
			tiffheader[offset]=(byte)(tag &amp; 0xff);
			tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+2]=5;  // Type Rational
			tiffheader[offset+4]=1;  // One Value
			tiffheader[offset+8]=(byte)(additionalOffset &amp; 0xff);
			tiffheader[offset+9]=(byte)((additionalOffset&gt;&gt;8) &amp; 0xff);
			tiffheader[offset+10]=(byte)((additionalOffset&gt;&gt;16) &amp; 0xff);
			tiffheader[offset+11]=(byte)((additionalOffset&gt;&gt;24) &amp; 0xff);
			tiffheader[additionalOffset++]=(byte) ((numerator) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((numerator&gt;&gt;8) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((numerator&gt;&gt;16) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((numerator&gt;&gt;24) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((denominator) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((denominator&gt;&gt;8) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((denominator&gt;&gt;16) &amp; 0xFF);
			tiffheader[additionalOffset++]=(byte) ((denominator&gt;&gt;24) &amp; 0xFF);
		}
	}
}
</java><java name='mil/army/us/utils/tiff/TiffWrapper.java'>/**
	 * Extends InputStream to wrap the data from the CCITT Fax with a suitable TIFF Header.
	 * For details see www.tiff.org, which contains useful information including pointers to the
	 * TIFF 6.0 Specification
	 *
	 */
package mil.army.us.utils.tiff;

import java.io.IOException;
import java.io.InputStream;

import org.apache.pdfbox.cos.COSArray;
import org.apache.pdfbox.cos.COSBase;

import org.apache.pdfbox.cos.COSDictionary;

public class TiffWrapper 
{
	private int currentOffset;     // When reading, where in the tiffheader are we.
	private byte[] tiffheader;      // Byte array to store tiff header data
	private InputStream datastream; // Original InputStream
	
	public TiffWrapper(InputStream rawstream, COSDictionary options)
	{
		buildHeader(options);
		currentOffset=0;
		datastream = rawstream;
	}
	// Implement basic methods from InputStream
	/**
	 * {@inheritDoc}
	 */
	public boolean markSupported()
	{
		return false;
	}
	/**
	 * {@inheritDoc}
	 */
	public void reset() throws IOException
	{
		throw new IOException("reset not supported");
	}

	/**
	 * For simple read, take a byte from the tiffheader array or pass through.
	 *
	 * {@inheritDoc}
	 */
	public int read() throws IOException
	{
		if (currentOffset &lt; tiffheader.length)
		{
			return tiffheader[currentOffset++];
		}
		return datastream.read();
	}

	/**
	 * For read methods only return as many bytes as we have left in the header
	 * if we've exhausted the header, pass through to the InputStream of the raw CCITT data.
	 *
	 * {@inheritDoc}
	 */
	public int read(byte[] data) throws IOException
	{
		if (currentOffset &lt; tiffheader.length)
		{
			int length = java.lang.Math.min(tiffheader.length - currentOffset, data.length);
			if (length &gt; 0)
			{
				System.arraycopy(tiffheader, currentOffset, data, 0, length);
			}
			currentOffset += length;
			return length;
		}
		else
		{
			return datastream.read(data);
		}
	}

	/**
	 * For read methods only return as many bytes as we have left in the header
	 * if we've exhausted the header, pass through to the InputStream of the raw CCITT data.
	 *
	 *  {@inheritDoc}
	 */
	public int read(byte[] data, int off, int len) throws IOException
	{
		if (currentOffset &lt; tiffheader.length)
		{
			int length = java.lang.Math.min(tiffheader.length - currentOffset, len);
			if (length &gt; 0)
			{
				System.arraycopy(tiffheader, currentOffset, data, off, length);
			}
			currentOffset += length;
			return length;
		}
		else
		{
			return datastream.read(data,off,len);
		}
	}

	/**
	 * When skipping if any header data not yet read, only allow to skip what we've in the buffer
	 * Otherwise just pass through.
	 *
	 * {@inheritDoc}
	 */
	public long skip(long n) throws IOException
	{
		if (currentOffset &lt; tiffheader.length)
		{
			long length = Math.min(tiffheader.length - currentOffset, n);
			currentOffset += length;
			return length;
		}
		else
		{
			return datastream.skip(n);
		}
	}

	// Static data for the beginning of the TIFF header
	private final byte[] basicHeader = {
			'I','I',42,0,8,0,0,0,       // File introducer and pointer to first IFD
			0,0};                       // Number of tags start with two


	private int additionalOffset;      // Offset in header to additional data

	// Builds up the tiffheader based on the options passed through.
	private void buildHeader(COSDictionary options)
	{

		final int numOfTags = 10; // The maximum tags we'll fill
		final int maxAdditionalData = 24; // The maximum amount of additional data
		// outside the IFDs. (bytes)

		// The length of the header will be the length of the basic header (10)
		// plus 12 bytes for each IFD, 4 bytes as a pointer to the next IFD (will be 0)
		// plus the length of the additional data

		tiffheader = new byte[10 + (12 * numOfTags ) + 4 + maxAdditionalData];
		java.util.Arrays.fill(tiffheader,(byte)0);
		System.arraycopy(basicHeader,0,tiffheader,0,basicHeader.length);

		// Additional data outside the IFD starts after the IFD's and pointer to the next IFD (0)
		additionalOffset = 10 + (12 * numOfTags ) + 4;

		// Now work out the variable values from TIFF defaults,
		// PDF Defaults and the Dictionary for this XObject
		short cols = 1728;
		short rows = 0;
		short blackis1 = 0;
		short comptype = 3; // T4 compression
		long t4options = 0; // Will set if 1d or 2d T4

		COSBase dicOrArrayParms = options.getDictionaryObject("DecodeParms");
		COSDictionary decodeParms = null;
		if( dicOrArrayParms instanceof COSDictionary )
		{
			decodeParms = (COSDictionary)dicOrArrayParms;
		}
		else
		{
			COSArray parmsArray = (COSArray)dicOrArrayParms;
			if( parmsArray.size() == 1 )
			{
				decodeParms = (COSDictionary)parmsArray.getObject( 0 );
			}
			else
			{
				//else find the first dictionary with Row/Column info and use that.
				for( int i=0; i&lt;parmsArray.size() &amp;&amp; decodeParms == null; i++ )
				{
					COSDictionary dic = (COSDictionary)parmsArray.getObject( i );
					if (dic != null &amp;&amp; 
							( dic.getDictionaryObject( "Columns" ) != null ||
									dic.getDictionaryObject( "Rows" ) != null))
					{
						decodeParms = dic;
					}
				}
			}
		}

		if (decodeParms != null)
		{
			cols = (short) decodeParms.getInt("Columns", cols);
			rows = (short) decodeParms.getInt("Rows", rows);
			if (decodeParms.getBoolean("BlackIs1", false))
			{
				blackis1 = 1;
			}
			int k = decodeParms.getInt("K");  // Mandatory parm
			if (k &lt; 0)
			{
				//T6
				comptype = 4;
			}
			if (k &gt; 0)
			{
				//T4 2D
				comptype = 3;
				t4options = 1;
			}
			// else k = 0, leave as default T4 1D compression
		}

		// If we couldn't get the number of rows, use the main item from XObject
		if (rows == 0)
		{
			rows = (short) options.getInt("Height", rows);
		}

		// Now put the tags into the tiffheader
		// These musn't exceed the maximum set above, and by TIFF spec should be sorted into
		// Numeric sequence.

		addTag(256, cols); // Columns
		addTag(257, rows); // Rows
		addTag(259, comptype);    // T6
		addTag(262, blackis1); // Photometric Interpretation
		addTag(273, tiffheader.length); // Offset to start of image data - updated below
		addTag(279, options.getInt("Length")); // Length of image data
		addTag(282, 300, 1); // X Resolution 300 (default unit Inches) This is arbitary
		addTag(283, 300, 1); // Y Resolution 300 (default unit Inches) This is arbitary
		if (comptype == 3)
		{
			addTag(292, t4options);
		}
		addTag(305, "PDFBOX"); // Software generating image
	}

	/* Tiff types 1 = byte, 2=ascii, 3=short, 4=ulong 5=rational */

	private void addTag(int tag,long value)
	{
		// Adds a tag of type 4 (ulong)
		int count = ++tiffheader[8];
		int offset = (count-1)*12 + 10;
		tiffheader[offset]=(byte)(tag &amp; 0xff);
		tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+2]=4;  // Type Long
		tiffheader[offset+4]=1;  // One Value
		tiffheader[offset+8]=(byte)(value &amp; 0xff);
		tiffheader[offset+9]=(byte)((value&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+10]=(byte)((value&gt;&gt;16) &amp; 0xff);
		tiffheader[offset+11]=(byte)((value&gt;&gt;24) &amp; 0xff);
	}

	private void addTag(int tag, short value)
	{
		// Adds a tag of type 3 (short)
		int count = ++tiffheader[8];
		int offset = (count-1)*12 + 10;
		tiffheader[offset]=(byte)(tag &amp; 0xff);
		tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+2]=3;  // Type Short
		tiffheader[offset+4]=1;  // One Value
		tiffheader[offset+8]=(byte)(value &amp; 0xff);
		tiffheader[offset+9]=(byte)((value&gt;&gt;8) &amp; 0xff);
	}

	private void addTag(int tag, String value)
	{
		// Adds a tag of type 2 (ascii)
		int count = ++tiffheader[8];
		int offset = (count-1)*12 + 10;
		tiffheader[offset]=(byte)(tag &amp; 0xff);
		tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+2]=2;  // Type Ascii
		tiffheader[offset+4]=1;  // One Value
		tiffheader[offset+8]=(byte)(additionalOffset &amp; 0xff);
		tiffheader[offset+9]=(byte)((additionalOffset&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+10]=(byte)((additionalOffset&gt;&gt;16) &amp; 0xff);
		tiffheader[offset+11]=(byte)((additionalOffset&gt;&gt;24) &amp; 0xff);
		System.arraycopy(value.getBytes(), 0, tiffheader, additionalOffset, value.length());
		additionalOffset += value.length() + 1;
	}

	private void addTag(int tag, long numerator, long denominator)
	{
		// Adds a tag of type 5 (rational)
		int count = ++tiffheader[8];
		int offset = (count-1)*12 + 10;
		tiffheader[offset]=(byte)(tag &amp; 0xff);
		tiffheader[offset+1]=(byte)((tag&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+2]=5;  // Type Rational
		tiffheader[offset+4]=1;  // One Value
		tiffheader[offset+8]=(byte)(additionalOffset &amp; 0xff);
		tiffheader[offset+9]=(byte)((additionalOffset&gt;&gt;8) &amp; 0xff);
		tiffheader[offset+10]=(byte)((additionalOffset&gt;&gt;16) &amp; 0xff);
		tiffheader[offset+11]=(byte)((additionalOffset&gt;&gt;24) &amp; 0xff);
		tiffheader[additionalOffset++]=(byte) ((numerator) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((numerator&gt;&gt;8) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((numerator&gt;&gt;16) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((numerator&gt;&gt;24) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((denominator) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((denominator&gt;&gt;8) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((denominator&gt;&gt;16) &amp; 0xFF);
		tiffheader[additionalOffset++]=(byte) ((denominator&gt;&gt;24) &amp; 0xFF);
	}
	
	
	

}
</java><java name='mil/army/us/utils/tiff/common/COSObjectable.java'>package mil.army.us.utils.tiff.common;

import mil.army.us.utils.tiff.cos.COSBase;

/**
 * This is an interface used to get/create the underlying COSObject.
 *
 * @author &lt;a href="mailto:ben@benlitchfield.com"&gt;Ben Litchfield&lt;/a&gt;
 * @version $Revision: 1.3 $
 */
public interface COSObjectable
{
    /**
     * Convert this standard java object to a COS object.
     *
     * @return The cos object that matches this Java object.
     */
    public COSBase getCOSObject();
}
</java><java name='mil/army/us/utils/tiff/cos/COSBase.java'>package mil.army.us.utils.tiff.cos;

import org.apache.pdfbox.cos.ICOSVisitor;
import org.apache.pdfbox.exceptions.COSVisitorException;

import mil.army.us.utils.tiff.common.COSObjectable;
import mil.army.us.utils.tiff.filter.FilterManager;

public abstract class COSBase implements COSObjectable
{
    /**
     * Constructor.
     */
    public COSBase()
    {
    }

    /**
     * This will get the filter manager to use to filter streams.
     *
     * @return The filter manager.
     */
    public FilterManager getFilterManager()
    {
        /**
         * @todo move this to PDFdocument or something better
         */
        return new FilterManager();
    }

    /**
     * Convert this standard java object to a COS object.
     *
     * @return The cos object that matches this Java object.
     */
    public COSBase getCOSObject()
    {
        return this;
    }



    /**
     * visitor pattern double dispatch method.
     *
     * @param visitor The object to notify when visiting this object.
     * @return any object, depending on the visitor implementation, or null
     * @throws COSVisitorException If an error occurs while visiting this object.
     */
    public abstract Object accept(ICOSVisitor visitor) throws COSVisitorException;
}
</java><java name='mil/army/us/utils/tiff/filter/Filter.java'>package mil.army.us.utils.tiff.filter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.pdfbox.cos.COSDictionary;



/**
 * This is the interface that will be used to apply filters to a byte stream.
 *
 * 
 * 
 */
public interface Filter
{
    /**
     * This will decode some compressed data.
     *
     * @param compressedData The compressed byte stream.
     * @param result The place to write the uncompressed byte stream.
     * @param options The options to use to encode the data.
     * @param filterIndex The index to the filter being decoded.
     *
     * @throws IOException If there is an error decompressing the stream.
     */
    public void decode( InputStream compressedData, OutputStream result, COSDictionary options, int filterIndex ) 
        throws IOException;

    /**
     * This will encode some data.
     *
     * @param rawData The raw data to encode.
     * @param result The place to write to encoded results to.
     * @param options The options to use to encode the data.
     * @param filterIndex The index to the filter being encoded.
     *
     * @throws IOException If there is an error compressing the stream.
     */
    public void encode( InputStream rawData, OutputStream result, COSDictionary options, int filterIndex ) 
        throws IOException;
}
</java><java name='mil/army/us/utils/tiff/filter/FilterManager.java'>package mil.army.us.utils.tiff.filter;
import java.io.IOException;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.filter.ASCII85Filter;
import org.apache.pdfbox.filter.ASCIIHexFilter;
import org.apache.pdfbox.filter.CCITTFaxDecodeFilter;
import org.apache.pdfbox.filter.DCTFilter;
import org.apache.pdfbox.filter.FlateFilter;
import org.apache.pdfbox.filter.LZWFilter;
import org.apache.pdfbox.filter.RunLengthDecodeFilter;

public class FilterManager 
{
    private Map filters = new HashMap();

    /**
     * Constructor.
     */
    public FilterManager()
    {
        Filter flateFilter = (Filter) new FlateFilter();
        Filter dctFilter = (Filter) new DCTFilter();
        Filter ccittFaxFilter = (Filter) new CCITTFaxDecodeFilter();
        Filter lzwFilter = (Filter) new LZWFilter();
        Filter asciiHexFilter = (Filter) new ASCIIHexFilter();
        Filter ascii85Filter = (Filter) new ASCII85Filter();
        Filter runLengthFilter = (Filter) new RunLengthDecodeFilter();

        addFilter( COSName.FLATE_DECODE, flateFilter );
        addFilter( COSName.FLATE_DECODE_ABBREVIATION, flateFilter );
        addFilter( COSName.DCT_DECODE, dctFilter );
        addFilter( COSName.DCT_DECODE_ABBREVIATION, dctFilter );
        addFilter( COSName.CCITTFAX_DECODE, ccittFaxFilter );
        addFilter( COSName.CCITTFAX_DECODE_ABBREVIATION, ccittFaxFilter );
        addFilter( COSName.LZW_DECODE, lzwFilter );
        addFilter( COSName.LZW_DECODE_ABBREVIATION, lzwFilter );
        addFilter( COSName.ASCII_HEX_DECODE, asciiHexFilter );
        addFilter( COSName.ASCII_HEX_DECODE_ABBREVIATION, asciiHexFilter );
        addFilter( COSName.ASCII85_DECODE, ascii85Filter );
        addFilter( COSName.ASCII85_DECODE_ABBREVIATION, ascii85Filter );
        addFilter( COSName.RUN_LENGTH_DECODE, runLengthFilter );
        addFilter( COSName.RUN_LENGTH_DECODE_ABBREVIATION, runLengthFilter );

    }

    /**
     * This will get all of the filters that are available in the system.
     *
     * @return All available filters in the system.
     */
    public Collection getFilters()
    {
        return filters.values();
    }

    /**
     * This will add an available filter.
     *
     * @param filterName The name of the filter.
     * @param filter The filter to use.
     */
    public void addFilter( COSName filterName, Filter filter )
    {
        filters.put( filterName, filter );
    }

    /**
     * This will get a filter by name.
     *
     * @param filterName The name of the filter to retrieve.
     *
     * @return The filter that matches the name.
     *
     * @throws IOException If the filter could not be found.
     */
    public Filter getFilter( COSName filterName ) throws IOException
    {
        Filter filter = (Filter)filters.get( filterName );
        if( filter == null )
        {
            throw new IOException( "Unknown stream filter:" + filterName );
        }

        return filter;
    }

    /**
     * This will get a filter by name.
     *
     * @param filterName The name of the filter to retrieve.
     *
     * @return The filter that matches the name.
     *
     * @throws IOException If the filter could not be found.
     */
    public Filter getFilter( String filterName ) throws IOException
    {
        return getFilter( COSName.getPDFName( filterName ) );
    }
}
</java></javaproject></code>
<item name='$JavaCompilerSource'><text>1.3</text></item>
<item name='$JavaCompilerTarget'><text>1.2</text></item></scriptlibrary>

