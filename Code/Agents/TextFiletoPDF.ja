<?xml version='1.0' encoding='utf-8'?>
<agent name='TextFiletoPDF' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.0' replicaid='85257CB50072A923' hide='v3' publicaccess='false'
 designerversion='8.5.3'>
<noteinfo noteid='1d6' unid='298AA884DFFBC17585257CA0005306A9' sequence='5'>
<created><datetime dst='true'>20140319T110651,93-04</datetime></created>
<modified><datetime dst='true'>20140411T134541,43-04</datetime></modified>
<revised><datetime dst='true'>20140411T134541,42-04</datetime></revised>
<lastaccessed><datetime dst='true'>20140411T134541,43-04</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20140409T165224,67-04</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name><name>CN=Admin Glunlimited/O=Development</name></updatedby>
<designchange><datetime dst='true'>20140411T134541,23-04</datetime></designchange>
<trigger type='actionsmenu'/>
<documentset type='runonce'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='c:\Program Files (x86)\IBM\Lotus\Notes\Data'><java name='JavaAgent.java'>import lotus.domino.*;

import java.io.BufferedReader;
//import java.io.File;
import java.io.FileReader;
//import java.io.FileInputStream;
import java.io.IOException;
import java.io.Reader;


import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDSimpleFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

public class JavaAgent extends AgentBase {

	/**
	 * Create a PDF document with some text.
	 *
	 * @param text The stream of text data.
	 *
	 * @return The document with the text in it.
	 *
	 * @throws IOException If there is an error writing the data.
	 */
	public PDDocument createPDFFromText( Reader text ) throws IOException
	{
		int fontSize = 10;
		PDSimpleFont font = PDType1Font.HELVETICA;
		PDDocument doc = null;
		try
		{

			final int margin = 40;
			float height = font.getFontDescriptor().getFontBoundingBox().getHeight()/1000;

			//calculate font height and increase by 5 percent.
			height = height*fontSize*1.05f;
			doc = new PDDocument();
			BufferedReader data = new BufferedReader( text );
			String nextLine = null;
			PDPage page = new PDPage();
			PDPageContentStream contentStream = null;
			float y = -1;
			float maxStringLength = page.getMediaBox().getWidth() - 2*margin;

			// There is a special case of creating a PDF document from an empty string.
			boolean textIsEmpty = true;

			while( (nextLine = data.readLine()) != null )
			{

				// The input text is nonEmpty. New pages will be created and added
				// to the PDF document as they are needed, depending on the length of
				// the text.
				textIsEmpty = false;

				String[] lineWords = nextLine.trim().split( " " );
				int lineIndex = 0;
				while( lineIndex &lt; lineWords.length )
				{
					StringBuffer nextLineToDraw = new StringBuffer();
					float lengthIfUsingNextWord = 0;
					do
					{
						nextLineToDraw.append( lineWords[lineIndex] );
						nextLineToDraw.append( " " );
						lineIndex++;
						if( lineIndex &lt; lineWords.length )
						{
							String lineWithNextWord = nextLineToDraw.toString() + lineWords[lineIndex];
							lengthIfUsingNextWord =
								(font.getStringWidth( lineWithNextWord )/1000) * fontSize;
						}
					}
					while( lineIndex &lt; lineWords.length &amp;&amp;
							lengthIfUsingNextWord &lt; maxStringLength );
					if( y &lt; margin )
					{
						// We have crossed the end-of-page boundary and need to extend the
						// document by another page.
						page = new PDPage();
						doc.addPage( page );
						if( contentStream != null )
						{
							contentStream.endText();
							contentStream.close();
						}
						contentStream = new PDPageContentStream(doc, page);
						contentStream.setFont( font, fontSize );
						contentStream.beginText();
						y = page.getMediaBox().getHeight() - margin + height;
						contentStream.moveTextPositionByAmount(
								margin, y );

					}
					//System.out.println( "Drawing string at " + x + "," + y );

					if( contentStream == null )
					{
						throw new IOException( "Error:Expected non-null content stream." );
					}
					contentStream.moveTextPositionByAmount( 0, -height);
					y -= height;
					contentStream.drawString( nextLineToDraw.toString() );
				}


			}

			// If the input text was the empty string, then the above while loop will have short-circuited
			// and we will not have added any PDPages to the document.
			// So in order to make the resultant PDF document readable by Adobe Reader etc, we'll add an empty page.
			if (textIsEmpty)
			{
				doc.addPage(page);
			}

			if( contentStream != null )
			{
				contentStream.endText();
				contentStream.close();
			}
		}
		catch( IOException io )
		{
			if( doc != null )
			{
				doc.close();
			}
			throw io;
		}
		return doc;
	}


	public void NotesMain() {
		PDDocument doc = null;
		String folder ="C:\\Users\\washingtongl\\Documents\\Temp\\Source";
		String dfolder ="C:\\Users\\washingtongl\\Documents\\Temp\\Destination";
		try {
			Session session = getSession();
			AgentContext agentContext = session.getAgentContext();

			// (Your code goes here)
			doc =  createPDFFromText( new FileReader(folder + "\\big.txt" ) );
			doc.save(dfolder + "\\TextToPdf.pdf" );


		} catch(Exception e) {
			e.printStackTrace();
		}
		finally
		{

			if( doc != null )
			{
				try {
					doc.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

		}		
	}
}</java></javaproject></code>
<rundata processeddocs='0' exitcode='0' agentdata='9FF91A21EFC0552385257CB00058F915'>
<agentmodified><datetime dst='true'>20140404T121129,51-04</datetime></agentmodified>
<agentrun><datetime dst='true'>20140404T124722,40-04</datetime></agentrun>
<runlog>Started running agent 'TextFiletoPDF' on 04/04/2014 12:47:14 PM
Ran Java Agent Class
Done running agent 'TextFiletoPDF' on 04/04/2014 12:47:22 PM
</runlog></rundata>
<item name='$JavaCompilerSource'><text>1.3</text></item>
<item name='$JavaCompilerTarget'><text>1.2</text></item></agent>

